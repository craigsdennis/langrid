/*
 * \$Id\$
 *
 * This is a program for Language Grid Core Node. This combines multiple language resources and provides composite language services.
 * Copyright (C) 2005-2009 NICT Language Grid Project.
 *
 * This program is free software: you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License as published by 
 * the Free Software Foundation, either version 2.1 of the License, or (at 
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but 
 * WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser 
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License 
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package jp.go.nict.langrid.language;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

/**
 * ISO639: 3 letter codes。
 * <#if locale="ja">
 * ISO639で定義されている3文字コードを定義する列挙。
 * <br>このファイルはスクリプトにより生成されます。
 * <br>date generated: ${date}
 * <#elseif locale="en">
 * </#if>
 * @author \$Author\$
 * @version \$Revision\$
 * @see <a href="http://www.loc.gov/standards/iso639-2/ISO-639-2_utf-8.txt">ISO639.2 code list</a>
 */
public enum ISO639_2 implements LanguageTag{
<% for(tag in tags) {
     def code3Bib = tag.threeLetterCodeBibliographic
     def code3Term = tag.threeLetterCodeTerminology
     def code2 = tag.twoLetterCode
     def desc = tag.descriptions

     if(code3Bib == null) continue

     def code3TermString = code3Term
     if(code3TermString != null){
       code3TermString = "\"" + code3TermString + "\""
     }
     def code3Comment = ", " + code3Bib
     if(code3Term != null){
       code3Comment <<= "/" + code3Term
     }

     def code2String = code2
     if(code2String != null){
       code2String = "ISO639_1." + code2String
     }
     def code2Comment = code2
     if(code2Comment == null){
       code2Comment = ""
     } else{
       code2Comment = ", " + code2Comment
     }
%>
	/**
	 * ${tag.descriptions}${code3Comment}${code2Comment}
	 */
	${code3Bib}("${code3Bib}", ${code3TermString}, ${code2String}, ${desc}),
<%
     if(code3Term != null){
%>
	/**
	 * ${tag.descriptions}${code3Comment}${code2Comment}
	 */
	${code3Term}("${code3Bib}", ${code3TermString}, ${code2String}, ${desc}),
<%

     }
   }
%>
	;

	/**
	 * <#if locale="ja">
	 * コンストラクタ。
	 * @param bibliographicCode 対応する3文字Bibliographicコード
	 * @param terminologyCode 対応する3文字Terminologyコード
	 * @param twoLetterCode 対応する2文字コード
	 * @param descriptions 説明の配列
	 * <#elseif locale="en">
	 * </#if>
	 */
	ISO639_2(String bibliographicCode, String terminologyCode
		, ISO639_1 twoLetterCode, String... descriptions)
	{
		this.bibliographicCode = bibliographicCode;
		this.terminologyCode = terminologyCode;
		this.twoLetterCode = twoLetterCode;
		this.descriptions = Collections.unmodifiableList(
			Arrays.asList(descriptions)
			);
	}

	/**
	 * <#if locale="ja">
	 * このオブジェクトのコードを取得する。
	 * @return このオブジェクトのコード
	 * <#elseif locale="en">
	 * </#if>
	 */
	public String getCode(){
		if(twoLetterCode != null){
			return twoLetterCode.name();
		} else if(terminologyCode != null){
			return terminologyCode;
		} else{
			return name();
		}
	}

	/**
	 * <#if locale="ja">
	 * 対応するBibliographicコードを取得する。
	 * 存在しない場合、nullを返す
	 * @return 対応するBibliographicコード
	 * <#elseif locale="en">
	 * </#if>
	 */
	public String getBibliographicCode(){
		return bibliographicCode;
	}

	/**
	 * <#if locale="ja">
	 * 対応するTerminologyコードを取得する。
	 * 存在しない場合、nullを返す
	 * @return 対応するTerminologyコード
	 * <#elseif locale="en">
	 * </#if>
	 */
	public String getTerminologyCode(){
		return terminologyCode;
	}

	/**
	 * <#if locale="ja">
	 * 2文字コードを取得する。
	 * 対応するコードが存在しない場合、nullを返す。
	 * @return 対応する2文字コード
	 * <#elseif locale="en">
	 * </#if>
	 */
	public ISO639_1 getTwoLetterCode(){
		return twoLetterCode;
	}

	/**
	 * <#if locale="ja">
	 * 説明の最初の要素を取得する。
	 * @return 説明の最初の要素
	 * <#elseif locale="en">
	 * </#if>
	 */
	public String getDescription(){
		return descriptions.get(0);
	}

	/**
	 * <#if locale="ja">
	 * 説明を取得する。
	 * BN("Bengali" "Bangla")など、説明が複数あるコードが存在する。
	 * @return 説明のリスト
	 * <#elseif locale="en">
	 * </#if>
	 */
	public List<String> getDescriptions(){
		return descriptions;
	}

	/**
	 * <#if locale="ja">
	 * 値のコレクションを返す。
	 * インスタンスは初期化時にCollections.unmodifiableCollection
	 * を使って一度だけ作成されるため、values()よりも高速に動作する。
	 * @return 値のコレクション
	 * <#elseif locale="en">
	 * </#if>
	 */
	public static Collection<ISO639_2> valuesCollection(){
		return values;
	}

	private String terminologyCode;
	private String bibliographicCode;
	private ISO639_1 twoLetterCode;
	private List<String> descriptions;

	private static final Collection<ISO639_2> values;

	static{
		values = Collections.unmodifiableCollection(
			Arrays.asList(values())
			);
	}
}
